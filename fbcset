#!/bin/bash

#####
# fbcset: fbterm color theme setter
# by Matt Black, 2018
#####


###
# Declare constants and flags
###
FBCSET_VERSION='1.0.0'
THEME_FILE_DIR="${HOME}/.fbthemes"
stdin_as_source=0
verbose=1
ignore_errs=0
default_path=1
xresources_compat=0

display_version() {
    echo "fbcset version ${FBCSET_VERSION} by Matt Black, 2018"
}

display_help() {
    display_version
    cat << 'EOF'
Usage: fbcset [options] [theme-file-name]

Options:
    -f | --file <path>          Read from a given file instead of
                                    scanning the default directory
    -h | --help                 Print this help text and exit
    -i | --ignore-errors        Ignore invalid lines instead of aborting
    -l | --list                 Print a list of available themes and exit
    -q | --quiet                Suppress standard output
    -v | --version              Print version and exit
    -x | --xresources           Xresources format compatibility mode

By default, fbcset looks for themes in the $HOME/.fbthemes directory.
You can set the path explicitly using the -f option.
If no theme name or explicit path is passed, fbcset will read from stdin.

Theme files may contain any number (within fbterm's capabilities) of lines,
assigning one color per line in the following format:
<color#_decimal> #rrggbb

Example:
# Lines starting with one of the following symbols are comments. # ! ;
# Empty lines are ignored.

0       #202020
8       #4c4c4c
12      #a02030
220     #fb1337
EOF
}

check_theme_folder() {
    if [ ! -e $THEME_FILE_DIR ]; then
        echo 'Error: directory ~/.fbthemes not found' >&2
        exit 2
    elif [ ! -d $THEME_FILE_DIR ]; then
        echo 'Error: ~/.fbthemes is not a directory' >&2
        exit 3
    fi
}

display_themes() {
    theme_list="`ls -1 ${THEME_FILE_DIR} 2>/dev/null`"
    if [ $? -eq 0 ]; then
        [ -z theme_list ] && echo "No themes found." || echo "${theme_list}"
    fi
    check_theme_folder
}


###
# Handle opts
###
opts=$(getopt -o 'f:hilqvx' -l\
              'file:,help,ignore-errors,list,quiet,version,xresources' -n 'fbcset' -- "$@")
if [ $? -ne 0 ]; then
    echo "Error: couldn't get options" >&2
    exit 1
fi

eval set -- "$opts"
unset opts

while true; do
    case "$1" in
        '-f'|'--file')
            default_path=0
            theme_file_path="$2"
            shift 2
            continue
            ;;
            
        '-h'|'--help')
            display_help
            exit 0
            ;;

        '-i'|'--ignore-errors')
            ignore_errs=1
            shift
            continue
            ;;

        '-l'|'--list')
            display_themes
            exit 0
            ;;
        
        '-q'|'--quiet')
            verbose=0
            shift
            continue
            ;;

        '-v'|'--version')
            display_version
            exit 0
            ;;

        '-x'|'--xresources')
            xresources_compat=1
            shift
            continue
            ;;

        '--')
            shift
            break
            ;;
    esac
done


###
# Check for stdin flag
###
if [ -z $1 ]; then
    stdin_as_source=1
fi


###
# Find the theme if custom path not set
###

# File path checks
if [ $default_path != 0 -a $stdin_as_source == 0 ]; then
    check_theme_folder
    theme_file_name="$1"
    theme_file_path="${THEME_FILE_DIR}/${theme_file_name}"
fi

# Check if we can find and read the given file
if [ $stdin_as_source == 0 ]; then
    
    if [ ! -e $theme_file_path ]; then
        echo "Error: file ${theme_file_path} not found" >&2
        exit 2
    elif [ -d $theme_file_path ]; then
        echo "Error: target file is a directory" >&2
        exit 3
    elif [ ! -r $theme_file_path ]; then
        echo "Error: could not read theme file" >&2
        exit 4
    fi

fi


###
# Parse and prepare the escapes
###

SED_COLNUM_PAT='/^[0-9]+\s*/!{q100}; s/(^[0-9]+).*/\1/'
SED_COLOR_PAT='/.*#[0-9a-fA-F]{6}/!{q101}; s/.*#([0-9a-fA-F]{6}).*/\1/'
SED_EMPTY_PAT='/^\s*$/{q99}; /^[#!;].*/{q99}'

if [ $xresources_compat != 0 ]; then
    SED_COLNUM_PAT='/^[^!][[:alnum:]]*\*?\.?color([0-9]+)|(background)|(foreground):.*/!{q100}; 
         s/^.*background:.*$/0/; s/^.*(foreground):.*$/7/; s/^.*color([0-9]+):.*/\1/'
    SED_EMPTY_PAT=$SED_EMPTY_PAT'; /^.*(color[0-9]+)|(background)|(foreground).*$/!{q99}'
fi

linum=0
esc_arr=()

while IFS="" read -r line || [ -n "$line" ]; do
    # Line counter to help debug
    ((linum++))

    # Ignore empty, whitespace'd or commented out lines
    empty_check=`echo $line | sed -r "${SED_EMPTY_PAT}"`
    if [ $? -eq 99 ]; then
        #echo "skipped: ${empty_check}" # debug
        continue
    fi

    # Parse the color number, exit with error code if no match
    col_num=`echo $line | sed -r "${SED_COLNUM_PAT}"`

    # Check sed exit value
    if [ $? -ne 0 ]; then
        echo "Error: ${theme_file_path:-stdin}: line ${linum}: missing color number" >&2
        [ $ignore_errs != 0 ] && continue || exit 6
    fi

    # Parse the color, exit with error code if no match
    col_hex=`echo $line | sed -r "${SED_COLOR_PAT}"`

    # Check our exit value again
    if [ $? -ne 0 ]; then
        echo "Error: ${theme_file_path:-stdin}: line ${linum}: missing or invalid color code" >&2
        [ $ignore_errs != 0 ] && continue || exit 7
    fi

    # Translate colors to decimal R,G,B
    col_r=$(( 16#${col_hex:0:2} ))
    col_g=$(( 16#${col_hex:2:2} ))
    col_b=$(( 16#${col_hex:4:2} ))

    # Print progress messages
    [ $verbose != 0 ] && [ -z ${esc_arr[$col_num]} ] && \
        printf "color %3d: #%s | %3d,%3d,%3d\n"\
               $col_num $col_hex $col_r $col_g $col_b

    # Construct and output the final escape sequence
    col_escape="\e[3;${col_num};${col_r};${col_g};${col_b}}"
    [ -z ${esc_arr[$col_num]} ] && esc_arr[$col_num]="${col_escape}"
done < ${theme_file_path:-/dev/stdin}

[ $verbose == 0 ] || echo -n "setting new colors... "
for esc in ${esc_arr[*]}; do
    echo -en "${esc}"
done
[ $verbose == 0 ] || echo "done"

exit 0
